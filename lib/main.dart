// lib/main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Import Firestore
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:myapp/navigation/app_router.dart'; // Provides goRouterProvider
import 'package:myapp/theme/app_theme.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:myapp/l10n/app_localizations.dart'; // Generated localizations

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Actual Firebase initialization should be configured by the developer
  // with their Firebase project credentials.
  // For this prototype, we assume it would be initialized here.
  // Example:
  // await Firebase.initializeApp(
  //   options: DefaultFirebaseOptions.currentPlatform, // From firebase_flutter_cli
  // );
  // print( // Commented out the placeholder print
  //   "Firebase Initialization Placeholder: Ensure Firebase is properly initialized for Auth to work.",
  // );

  // Initialize Firebase (if not already done by a generated file like firebase_options.dart)
  // For this prototype, we'll simulate initialization.
  // In a real app, ensure Firebase.initializeApp() is called.
  // For example, using firebase_options.dart generated by FlutterFire CLI:
  // await Firebase.initializeApp(
  //   options: DefaultFirebaseOptions.currentPlatform,
  // );

  // Enable Firestore offline persistence
  FirebaseFirestore.instance.settings = const Settings(
    persistenceEnabled: true,
    cacheSizeBytes: Settings.CACHE_SIZE_UNLIMITED, // Optional: adjust cache size
  );

  // TODO: Replace with actual Firebase initialization
  // This is a placeholder to avoid crashing the app if Firebase is not configured.
  // In a real app, you would await Firebase.initializeApp() here.
  if (Firebase.apps.isEmpty) {
    // This is a minimal configuration. Replace with your actual Firebase project settings.
    await Firebase.initializeApp(
      options: const FirebaseOptions(
        apiKey: "YOUR_API_KEY", // Replace with your actual API key
        appId: "YOUR_APP_ID", // Replace with your actual App ID
        messagingSenderId: "YOUR_MESSAGING_SENDER_ID", // Replace with your actual Sender ID
        projectId: "YOUR_PROJECT_ID", // Replace with your actual Project ID
        storageBucket: "YOUR_STORAGE_BUCKET", // Optional: if you use Firebase Storage
      ),
    );
    print("Firebase initialized with placeholder options. Replace with your actual Firebase project settings.");
  } else {
    print("Firebase already initialized.");
  }


  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final themeMode = ref.watch(themeModeProvider);
    final goRouter = ref.watch(goRouterProvider); // Watch the goRouterProvider

    return MaterialApp.router(
      title:
          'CAINS App', // Will be overridden by onGenerateTitle if implemented
      debugShowCheckedModeBanner: false,

      // Theme configuration
      themeMode: themeMode,
      theme: AppTheme.lightTheme,
      darkTheme: AppTheme.darkTheme,

      // Router configuration
      routerConfig: goRouter, // Use the goRouter instance from the provider
      // Localization configuration
      localizationsDelegates: const [
        AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: AppLocalizations.supportedLocales,

      // TODO: Implement onGenerateTitle for localized app title
      // onGenerateTitle: (BuildContext context) {
      //   // Ensure AppLocalizations is available
      //   // return AppLocalizations.of(context)?.appTitle ?? 'CAINS App';
      //   return 'CAINS App'; // Placeholder
      // },
    );
  }
}
